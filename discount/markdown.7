.\"
.Dd Dec 22, 2007
.Dt MARKDOWN 7
.Os MASTODON
.Sh NAME
.Nm Markdown
.Nd The Markdown text formatting syntax
.Sh DESCRIPTION
.Ss Philosophy
.Nm Markdown
is intended to be as easy-to-read and easy-to-write as is feasible.
.Pp
Readability, however, is emphasized above all else. A Markdown-formatted
document should be publishable as-is, as plain text, without looking
like it's been marked up with tags or formatting instructions. While
Markdown's syntax has been influenced by several existing text-to-HTML
filters -- including
.Em Setext ,
.Em atx ,
.Em Textile ,
.Em reStructuredText ,
.Em Grutatext ,
and
.Em EtText
\-\- the single biggest source of
inspiration for
Markdown's
syntax is the format of plain text email.
.Pp
To this end, Markdown's syntax is comprised entirely of punctuation
characters, which punctuation characters have been carefully chosen so
as to look like what they mean. E.g., asterisks around a word actually
look like *emphasis*. Markdown lists look like, well, lists. Even
blockquotes look like quoted passages of text, assuming you've ever
used email.
.Ss Inline HTML
Markdown's syntax is intended for one purpose: to be used as a
format for
.Em writing
for the web.
.Pp
.Nm
is not a replacement for HTML, or even close to it. Its
syntax is very small, corresponding only to a very small subset of
HTML tags. The idea is
.Em not
to create a syntax that makes it easier
to insert HTML tags. In my opinion, HTML tags are already easy to
insert. The idea for Markdown is to make it easy to read, write, and
edit prose. HTML is a
.Em publishing
format; Markdown is a
.Em writing
format. Thus, Markdown's formatting syntax only addresses issues that
can be conveyed in plain text.
.Pp
For any markup that is not covered by Markdown's syntax, you simply
use HTML itself. There's no need to preface it or delimit it to
indicate that you're switching from Markdown to HTML; you just use
the tags.
.Pp
The only restrictions are that block-level HTML elements -- e.g.
.Li \<div> ,
.Li \<table> ,
.Li \<pre> ,
.Li \<p> ,
etc. -- must be separated from surrounding
content by blank lines, and the start and end tags of the block should
not be indented with tabs or spaces. Markdown is smart enough not
to add extra (unwanted)
.Li \<p>
tags around HTML block-level tags.
.Pp
For example, to add an HTML table to a Markdown article:
.Bd -literal -offset indent
    This is a regular paragraph.

    <table>
        <tr>
            <td>Foo</td>
        </tr>
    </table>

    This is another regular paragraph.
.Ed
.Pp
Note that Markdown formatting syntax is not processed within block-level
HTML tags. E.g., you can't use Markdown-style 
.Li *emphasis*
inside an HTML block.
.Pp
Span-level HTML tags -- e.g. 
.Li \<span> ,
.Li \<cite> ,
or
.Li \<del>
\-\- can be
used anywhere in a Markdown paragraph, list item, or header. If you
want, you can even use HTML tags instead of Markdown formatting; e.g. if
you'd prefer to use HTML 
.Li \<a>
or
.Li \<img>
tags instead of Markdown's
link or image syntax, go right ahead.
.Pp
Unlike block-level HTML tags, Markdown syntax *is* processed within
span-level tags.
.Ss Automatic Escaping for Special Characters
In HTML, there are two characters that demand special treatment: `<`
and `&`. Left angle brackets are used to start tags; ampersands are
used to denote HTML entities. If you want to use them as literal
characters, you must escape them as entities, e.g. `&lt;`, and
`&amp;`.
.Pp
Ampersands in particular are bedeviling for web writers. If you want to
write about 'AT&T', you need to write '`AT&amp;T`'. You even need to
escape ampersands within URLs. Thus, if you want to link to:
.Bd -literal -offset indent
    http://images.google.com/images?num=30&q=larry+bird
.Ed
.Pp
you need to encode the URL as:
.Bd -literal -offset indent
    http://images.google.com/images?num=30&amp;q=larry+bird
.Ed
.Pp
in your anchor tag `href` attribute. Needless to say, this is easy to
forget, and is probably the single most common source of HTML validation
errors in otherwise well-marked-up web sites.
.Pp
.Nm
allows you to use these characters naturally, taking care of
all the necessary escaping for you. If you use an ampersand as part of
an HTML entity, it remains unchanged; otherwise it will be translated
into `&amp;`.
.Pp
So, if you want to include a copyright symbol in your article, you can write:
.Bd -literal -offset indent
    &copy;
.Ed
.Pp
and Markdown will leave it alone. But if you write:
.Bd -literal -offset indent
    AT&T
.Ed
.Pp
.Nm
will translate it to:
.Bd -literal -offset indent
    AT&amp;T
.Ed
.Pp
Similarly, because Markdown supports inline HTML, if you use
angle brackets as delimiters for HTML tags, Markdown will treat them as
such. But if you write:
.Bd -literal -offset indent
    4 < 5
.Ed
.Pp
.Nm
will translate it to:
.Bd -literal -offset indent
    4 &lt; 5
.Ed
.Pp
However, inside Markdown code spans and blocks, angle brackets and
ampersands are *always* encoded automatically. This makes it easy to use
Markdown to write about HTML code. (As opposed to raw HTML, which is a
terrible format for writing about HTML syntax, because every single `<`
and `&` in your example code needs to be escaped.)
.Sh Block Elements
.Ss Paragraphs and Line Breaks
.Pp
A paragraph is simply one or more consecutive lines of text, separated
by one or more blank lines. (A blank line is any line that looks like a
blank line -- a line containing nothing but spaces or tabs is considered
blank.) Normal paragraphs should not be indented with spaces or tabs.
.Pp
The implication of the
.Qq one or more consecutive lines of text
rule is
that Markdown supports
.Qq hard-wrapped
Dtext paragraphs. This differs
significantly from most other text-to-HTML formatters (including Movable
Type's
.Qq Convert Line Breaks
option) which translate every line break
character in a paragraph into a `<br />` tag.
.Pp
When you *do* want to insert a `<br />` break tag using Markdown, you
end a line with two or more spaces, then type return.
.Pp
Yes, this takes a tad more effort to create a `<br />`, but a simplistic
"every line break is a `<br />`" rule wouldn't work for Markdown.
Markdown's email-style
.Sx  blockquoting
 and multi-paragraph
.Sx  list items
work best -- and look better -- when you format them with hard breaks.
.Ss Headers
.Nm
supports two styles of headers, 
.Em Setext
and
.Em atx .
.Pp
Setext-style headers are
.Sq underlined
using equal signs (for first-level
headers) and dashes (for second-level headers). For example:
.Bd -literal -offset indent
    This is an H1
    =============

    This is an H2
    -------------
.Ed
.Pp
Any number of underlining `=`'s or `-`'s will work.
.Pp
Atx-style headers use 1-6 hash characters at the start of the line,
corresponding to header levels 1-6. For example:
.Bd -literal -offset indent
    # This is an H1

    ## This is an H2

    ###### This is an H6
.Ed
.Pp
Optionally, you may 
.Qq close
atx-style headers. This is purely
cosmetic -- you can use this if you think it looks better. The
closing hashes don't even need to match the number of hashes
used to open the header. (The number of opening hashes
determines the header level.) :
.Bd -literal -offset indent
    # This is an H1 #

    ## This is an H2 ##

    ### This is an H3 ######
.Ed
.Pp
.Ss Blockquotes
.Nm
uses email-style `>` characters for blockquoting. If you're
familiar with quoting passages of text in an email message, then you
know how to create a blockquote in Markdown. It looks best if you hard
wrap the text and put a `>` before every line:
.Bd -literal -offset indent
    > This is a blockquote with two paragraphs. Lorem ipsum
    > dolor sit amet, consectetuer adipiscing elit. Aliquam
    > hendrerit mi posuere lectus. Vestibulum enim wisi,
    > viverra nec, fringilla in, laoreet vitae, risus.
    > 
    > Donec sit amet nisl. Aliquam semper ipsum sit amet
    > velit. Suspendisse id sem consectetuer libero luctus
    > adipiscing.
.Ed
.Pp
.Nm
allows you to be lazy and only put the `>` before the first
line of a hard-wrapped paragraph:
.Bd -literal -offset indent
    > This is a blockquote with two paragraphs. Lorem ipsum
    dolor sit amet, consectetuer adipiscing elit. Aliquam
    hendrerit mi posuere lectus. Vestibulum enim wisi,
    viverra nec, fringilla in, laoreet vitae, risus.

    > Donec sit amet nisl. Aliquam semper ipsum sit amet
     velit. Suspendisse id sem consectetuer libero luctus
      adipiscing.
.Ed
.Pp
Blockquotes can be nested (i.e. a blockquote-in-a-blockquote) by
adding additional levels of `>`:
.Bd -literal -offset indent
    > This is the first level of quoting.
    >
    > > This is nested blockquote.
    >
    > Back to the first level.
.Ed
.Pp
Blockquotes can contain other Markdown elements, including headers, lists,
and code blocks:
.Bd -literal -offset indent
	> ## This is a header.
	> 
	> 1.   This is the first list item.
	> 2.   This is the second list item.
	> 
	> Here's some example code:
	> 
	>     return shell_exec("echo $input | $markdown_script");
.Ed
.Pp
Any decent text editor should make email-style quoting easy. For
example, with BBEdit, you can make a selection and choose Increase
Quote Level from the Text menu.
.Ss Lists
.Nm
supports ordered (numbered) and unordered (bulleted) lists.
.Pp
Unordered lists use asterisks, pluses, and hyphens -- interchangably
\-- as list markers:
.Bd -literal -offset indent
    *   Red
    *   Green
    *   Blue
.Ed
.Pp
is equivalent to:
.Bd -literal -offset indent
    +   Red
    +   Green
    +   Blue
.Ed
.Pp
and:
.Bd -literal -offset indent
    -   Red
    -   Green
    -   Blue
.Ed
.Pp
Ordered lists use numbers followed by periods:
.Bd -literal -offset indent
    1.  Bird
    2.  McHale
    3.  Parish
.Ed
.Pp
It's important to note that the actual numbers you use to mark the
list have no effect on the HTML output Markdown produces. The HTML
Markdown produces from the above list is:
.Bd -literal -offset indent
    <ol>
    <li>Bird</li>
    <li>McHale</li>
    <li>Parish</li>
    </ol>
.Ed
.Pp
If you instead wrote the list in Markdown like this:
.Bd -literal -offset indent
    1.  Bird
    1.  McHale
    1.  Parish
.Ed
.Pp
or even:
.Bd -literal -offset indent
    3. Bird
    1. McHale
    8. Parish
.Ed
.Pp
you'd get the exact same HTML output. The point is, if you want to,
you can use ordinal numbers in your ordered Markdown lists, so that
the numbers in your source match the numbers in your published HTML.
But if you want to be lazy, you don't have to.
.Pp
If you do use lazy list numbering, however, you should still start the
list with the number 1. At some point in the future, Markdown may support
starting ordered lists at an arbitrary number.
.Pp
List markers typically start at the left margin, but may be indented by
up to three spaces. List markers must be followed by one or more spaces
or a tab.
.Pp
To make lists look nice, you can wrap items with hanging indents:
.Bd -literal -offset indent
    *   Lorem ipsum dolor sit amet, consectetuer adipiscing
	elit. Aliquam hendrerit mi posuere lectus. Vestibulum
	enim wisi, viverra nec, fringilla in, laoreet vitae,
	risus.
    *   Donec sit amet nisl. Aliquam semper ipsum sit amet
	velit. Suspendisse id sem consectetuer libero luctus
	adipiscing.
.Ed
.Pp
But if you want to be lazy, you don't have to:
.Bd -literal -offset indent
    *   Lorem ipsum dolor sit amet, consectetuer adipiscing
    elit. Aliquam hendrerit mi posuere lectus. Vestibulum
    enim wisi, viverra nec, fringilla in, laoreet vitae,
    risus.
    *   Donec sit amet nisl. Aliquam semper ipsum sit amet
    velit. Suspendisse id sem consectetuer libero luctus
    adipiscing.
.Ed
.Pp
If list items are separated by blank lines, Markdown will wrap the
items in `<p>` tags in the HTML output. For example, this input:
.Bd -literal -offset indent
    *   Bird
    *   Magic
.Ed
.Pp
will turn into:
.Bd -literal -offset indent
    <ul>
    <li>Bird</li>
    <li>Magic</li>
    </ul>
.Ed
.Pp
But this:
.Bd -literal -offset indent
    *   Bird

    *   Magic
.Ed
.Pp
will turn into:
.Bd -literal -offset indent
    <ul>
    <li><p>Bird</p></li>
    <li><p>Magic</p></li>
    </ul>
.Ed
.Pp
List items may consist of multiple paragraphs. Each subsequent
paragraph in a list item must be intended by either 4 spaces
or one tab:
.Bd -literal -offset indent
    1.  This is a list item with two paragraphs. Lorem ipsum
	dolor sit amet, consectetuer adipiscing elit. Aliquam
	hendrerit mi posuere lectus.

        Vestibulum enim wisi, viverra nec, fringilla in,
	laoreet vitae, risus. Donec sit amet nisl. Aliquam
	semper ipsum sit amet velit.

    2.  Suspendisse id sem consectetuer libero luctus
	adipiscing.
.Ed
.Pp
It looks nice if you indent every line of the subsequent
paragraphs, but here again, Markdown will allow you to be
lazy:
.Bd -literal -offset indent
    *   This is a list item with two paragraphs.

        This is the second paragraph in the list item.
	You're only required to indent the first line. Lorem
	ipsum dolor sit amet, consectetuer adipiscing elit.

    *   Another item in the same list.
.Ed
.Pp
To put a blockquote within a list item, the blockquote's `>`
delimiters need to be indented:
.Bd -literal -offset indent
    *   A list item with a blockquote:

        > This is a blockquote
        > inside a list item.
.Ed
.Pp
To put a code block within a list item, the code block needs
to be indented *twice* -- 8 spaces or two tabs:
.Bd -literal -offset indent
    *   A list item with a code block:

            <code goes here>
.Ed
.Pp
It's worth noting that it's possible to trigger an ordered list by
accident, by writing something like this:
.Bd -literal -offset indent
    1986. What a great season.
.Ed
.Pp
In other words, a *number-period-space* sequence at the beginning of a
line. To avoid this, you can backslash-escape the period:
.Bd -literal -offset indent
    1986\\. What a great season.
.Ed
.Pp
.Ss Code Blocks
Pre-formatted code blocks are used for writing about programming or
markup source code. Rather than forming normal paragraphs, the lines
of a code block are interpreted literally. Markdown wraps a code block
in both `<pre>` and `<code>` tags.
.Pp
To produce a code block in Markdown, simply indent every line of the
block by at least 4 spaces or 1 tab. For example, given this input:
.Bd -literal -offset indent
    This is a normal paragraph:

        This is a code block.
.Ed
.Pp
.Nm
will generate:
.Bd -literal -offset indent
    <p>This is a normal paragraph:</p>

    <pre><code>This is a code block.
    </code></pre>
.Ed
.Pp
One level of indentation -- 4 spaces or 1 tab -- is removed from each
line of the code block. For example, this:
.Bd -literal -offset indent
    Here is an example of AppleScript:

        tell application "Foo"
            beep
        end tell
.Ed
.Pp
will turn into:
.Bd -literal -offset indent
    <p>Here is an example of AppleScript:</p>

    <pre><code>tell application "Foo"
        beep
    end tell
    </code></pre>
.Ed
.Pp
A code block continues until it reaches a line that is not indented
(or the end of the article).
.Pp
Within a code block, ampersands (`&`) and angle brackets (`<` and `>`)
are automatically converted into HTML entities. This makes it very
easy to include example HTML source code using Markdown -- just paste
it and indent it, and Markdown will handle the hassle of encoding the
ampersands and angle brackets. For example, this:
.Bd -literal -offset indent
        <div class="footer">
            &copy; 2004 Foo Corporation
        </div>
.Ed
.Pp
will turn into:
.Bd -literal -offset indent
    <pre><code>&lt;div class="footer"&gt;
        &amp;copy; 2004 Foo Corporation
    &lt;/div&gt;
    </code></pre>
.Ed
.Pp
Regular Markdown syntax is not processed within code blocks. E.g.,
asterisks are just literal asterisks within a code block. This means
it's also easy to use Markdown to write about Markdown's own syntax.
.Ss Horizontal Rules
You can produce a horizontal rule tag (`<hr />`) by placing three or
more hyphens, asterisks, or underscores on a line by themselves. If you
wish, you may use spaces between the hyphens or asterisks. Each of the
following lines will produce a horizontal rule:
.Bd -literal -offset indent
    * * *

    ***

    *****

    - - -

    ---------------------------------------
.Ed
.Pp
.Sh Span Elements
.Ss Links
.Nm
supports two style of links:
.Em inline
and
.Em reference .
.Pp
In both styles, the link text is delimited by [square brackets].
.Pp
To create an inline link, use a set of regular parentheses immediately
after the link text's closing square bracket. Inside the parentheses,
put the URL where you want the link to point, along with an *optional*
title for the link, surrounded in quotes. For example:
.Bd -literal -offset indent
    This is [an example](http://example.com/ "Title") inline link.

    [This link](http://example.net/) has no title attribute.
.Ed
.Pp
Will produce:
.Bd -literal -offset indent
    <p>This is <a href="http://example.com/" title="Title">
    an example</a> inline link.</p>

    <p><a href="http://example.net/">This link</a> has no
    title attribute.</p>
.Ed
.Pp
If you're referring to a local resource on the same server, you can
use relative paths:
.Bd -literal -offset indent
    See my [About](/about/) page for details.   
.Ed
.Pp
Reference-style links use a second set of square brackets, inside
which you place a label of your choosing to identify the link:
.Bd -literal -offset indent
    This is [an example][id] reference-style link.
.Ed
.Pp
You can optionally use a space to separate the sets of brackets:
.Bd -literal -offset indent
    This is [an example] [id] reference-style link.
.Ed
.Pp
Then, anywhere in the document, you define your link label like this,
on a line by itself:
.Bd -literal -offset indent
    [id]: http://example.com/  "Optional Title Here"
.Ed
.Pp
That is:
.Bl -bullet
.It
Square brackets containing the link identifier (optionally
indented from the left margin using up to three spaces);
.It
followed by a colon;
.It
followed by one or more spaces (or tabs);
.It
followed by the URL for the link;
.It
optionally followed by a title attribute for the link, enclosed
in double or single quotes, or enclosed in parentheses.
.El
.Pp
The following three link definitions are equivalent:
.Bd -literal -offset indent
	[foo]: http://example.com/  "Optional Title Here"
	[foo]: http://example.com/  'Optional Title Here'
	[foo]: http://example.com/  (Optional Title Here)
.Ed
.Pp
.Em Note :
There is a known bug in Markdown.pl 1.0.1 which prevents
single quotes from being used to delimit link titles.
.Pp
The link URL may, optionally, be surrounded by angle brackets:
.Bd -literal -offset indent
    [id]: <http://example.com/>  "Optional Title Here"
.Ed
.Pp
You can put the title attribute on the next line and use extra spaces
or tabs for padding, which tends to look better with longer URLs:
.Bd -literal -offset indent
    [id]: http://example.com/longish/path/to/resource/here
        "Optional Title Here"
.Ed
.Pp
Link definitions are only used for creating links during Markdown
processing, and are stripped from your document in the HTML output.
.Pp
Link definition names may constist of letters, numbers, spaces, and
punctuation -- but they are
.Em not
case sensitive. E.g. these two
links:
.Bd -literal -offset indent
	[link text][a]
	[link text][A]
.Ed
.Pp
are equivalent.
.Pp
The
.Em implicit link name
shortcut allows you to omit the name of the
link, in which case the link text itself is used as the name.
Just use an empty set of square brackets -- e.g., to link the word
.Qq Google
to the google.com web site, you could simply write:
.Bd -literal -offset indent
	[Google][]
.Ed
.Pp
And then define the link:
.Bd -literal -offset indent
	[Google]: http://google.com/
.Ed
.Pp
Because link names may contain spaces, this shortcut even works for
multiple words in the link text:
.Bd -literal -offset indent
	Visit [Daring Fireball][] for more information.
.Ed
.Pp
And then define the link:
.Bd -literal -offset indent
	[Daring Fireball]: http://daringfireball.net/
.Ed
.Pp
Link definitions can be placed anywhere in your Markdown document. I
tend to put them immediately after each paragraph in which they're
used, but if you want, you can put them all at the end of your
document, sort of like footnotes.
.Pp
Here's an example of reference links in action:
.Bd -literal -offset indent
    I get 10 times more traffic from [Google] [1] than from
    [Yahoo] [2] or [MSN] [3].

      [1]: http://google.com/        "Google"
      [2]: http://search.yahoo.com/  "Yahoo Search"
      [3]: http://search.msn.com/    "MSN Search"
.Ed
.Pp
Using the implicit link name shortcut, you could instead write:
.Bd -literal -offset indent
    I get 10 times more traffic from [Google][] than from
    [Yahoo][] or [MSN][].

      [google]: http://google.com/        "Google"
      [yahoo]:  http://search.yahoo.com/  "Yahoo Search"
      [msn]:    http://search.msn.com/    "MSN Search"
.Ed
.Pp
Both of the above examples will produce the following HTML output:
.Bd -literal -offset indent
    <p>I get 10 times more traffic from <a href="http://google.com/"
    title="Google">Google</a> than from
    <a href="http://search.yahoo.com/" title="Yahoo Search">Yahoo</a>
    or
    <a href="http://search.msn.com/" title="MSN Search">MSN</a>.</p>
.Ed
.Pp
For comparison, here is the same paragraph written using
Markdown's inline link style:
.Bd -literal -offset indent
    I get 10 times more traffic from
    [Google](http://google.com/ "Google") than from
    [Yahoo](http://search.yahoo.com/ "Yahoo Search") or
    [MSN](http://search.msn.com/ "MSN Search").
.Ed
.Pp
The point of reference-style links is not that they're easier to
write. The point is that with reference-style links, your document
source is vastly more readable. Compare the above examples: using
reference-style links, the paragraph itself is only 81 characters
long; with inline-style links, it's 176 characters; and as raw HTML,
it's 234 characters. In the raw HTML, there's more markup than there
is text.
.Pp
With Markdown's reference-style links, a source document much more
closely resembles the final output, as rendered in a browser. By
allowing you to move the markup-related metadata out of the paragraph,
you can add links without interrupting the narrative flow of your
prose.
.Ss Emphasis
Markdown treats asterisks (`*`) and underscores (`_`) as indicators of
emphasis. Text wrapped with one `*` or `_` will be wrapped with an
HTML `<em>` tag; double `*`'s or `_`'s will be wrapped with an HTML
`<strong>` tag. E.g., this input:
.Bd -literal -offset indent
    *single asterisks*

    _single underscores_

    **double asterisks**

    __double underscores__
.Ed
.Pp
will produce:
.Bd -literal -offset indent
    <em>single asterisks</em>

    <em>single underscores</em>

    <strong>double asterisks</strong>

    <strong>double underscores</strong>
.Ed
.Pp
You can use whichever style you prefer; the lone restriction is that
the same character must be used to open and close an emphasis span.
.Pp
Emphasis can be used in the middle of a word:
.Bd -literal -offset indent
    un*fucking*believable
.Ed
.Pp
But if you surround an `*` or `_` with spaces, it'll be treated as a
literal asterisk or underscore.
.Pp
To produce a literal asterisk or underscore at a position where it
would otherwise be used as an emphasis delimiter, you can backslash
escape it:
.Bd -literal -offset indent
    \\*this text is surrounded by literal asterisks\\*
.Ed
.Pp
.Ss Code
To indicate a span of code, wrap it with backtick quotes (`` ` ``).
Unlike a pre-formatted code block, a code span indicates code within a
normal paragraph. For example:
.Bd -literal -offset indent
    Use the `printf()` function.
.Ed
.Pp
will produce:
.Bd -literal -offset indent
    <p>Use the <code>printf()</code> function.</p>
.Ed
.Pp
To include a literal backtick character within a code span, you can use
multiple backticks as the opening and closing delimiters:
.Bd -literal -offset indent
    ``There is a literal backtick (`) here.``
.Ed
.Pp
which will produce this:
.Bd -literal -offset indent
    <p><code>There is a literal backtick (`) here.</code></p>
.Ed
.Pp
The backtick delimiters surrounding a code span may include spaces --
one after the opening, one before the closing. This allows you to place
literal backtick characters at the beginning or end of a code span:
.Bd -literal -offset indent
	A single backtick in a code span: `` ` ``
	
	A backtick-delimited string in a code span: `` `foo` ``
.Ed
.Pp
will produce:
.Bd -literal -offset indent
	<p>A single backtick in a code span: <code>`</code></p>
	
	<p>A backtick-delimited string in a code span: <code>`foo`</code></p>
.Ed
.Pp
With a code span, ampersands and angle brackets are encoded as HTML
entities automatically, which makes it easy to include example HTML
tags. Markdown will turn this:
.Bd -literal -offset indent
    Please don't use any `<blink>` tags.
.Ed
.Pp
into:
.Bd -literal -offset indent
    <p>Please don't use any <code>&lt;blink&gt;</code> tags.</p>
.Ed
.Pp
You can write this:
.Bd -literal -offset indent
    `&#8212;` is the decimal-encoded equivalent of `&mdash;`.
.Ed
.Pp
to produce:
.Bd -literal -offset indent
    <p><code>&amp;#8212;</code> is the decimal-encoded
    equivalent of <code>&amp;mdash;</code>.</p>
.Ed
.Pp
.Ss Images
Admittedly, it's fairly difficult to devise a
.Qq natural
syntax for placing images into a plain text document format.
.Pp
Markdown uses an image syntax that is intended to resemble the syntax
for links, allowing for two styles:
.Em inline
and
.Em reference .
.Pp
Inline image syntax looks like this:
.Bd -literal -offset indent
    ![Alt text](/path/to/img.jpg)

    ![Alt text](/path/to/img.jpg =Optional size "Optional title")
.Ed
.Pp
That is:
.Bl -bullet
.It
An exclamation mark: `!`;
.It
followed by a set of square brackets, containing the `alt`
attribute text for the image;
.It
followed by a set of parentheses, containing the URL or path to
the image, an optional `size` attribute (in
.Ar width Li c Ar height
format) prefixed with a `=`,
and an optional `title` attribute enclosed in double
or single quotes.
.El
.Pp
Reference-style image syntax looks like this:
.Bd -literal -offset indent
    ![Alt text][id]
.Ed
.Pp
Where
.Qq id
is the name of a defined image reference. Image references
are defined using syntax identical to link references:
.Bd -literal -offset indent
    [id]: url/to/image  =Optional size "Optional title attribute"
.Ed
.Pp
.Sh Miscellaneous
.Ss Automatic Links
.Nm
supports a shortcut style for creating
.Qq automatic
links for URLs and email addresses: simply surround the URL or email
address with angle brackets. What this means is that if you want to
 show the actual text of a URL or email address, and also have it be
  a clickable link, you can do this:
.Bd -literal -offset indent
    <http://example.com/>
.Ed
.Pp
.Nm
will turn this into:
.Bd -literal -offset indent
    <a href="http://example.com/">http://example.com/</a>
.Ed
.Pp
Automatic links for email addresses work similarly, except that
Markdown will also perform a bit of randomized decimal and hex
entity-encoding to help obscure your address from address-harvesting
spambots. For example, Markdown will turn this:
.Bd -literal -offset indent
    <address@example.com>
.Ed
.Pp
into something like this:
.Bd -literal -offset indent
    <a href="&#x6D;&#x61;i&#x6C;&#x74;&#x6F;:&#x61;&#x64;&#x64;&#x72;&#x65;
    &#115;&#115;&#64;&#101;&#120;&#x61;&#109;&#x70;&#x6C;e&#x2E;&#99;&#111;
    &#109;">&#x61;&#x64;&#x64;&#x72;&#x65;&#115;&#115;&#64;&#101;&#120;&#x61;
    &#109;&#x70;&#x6C;e&#x2E;&#99;&#111;&#109;</a>
.Ed
.Pp
which will render in a browser as a clickable link to
.Qq address@example.com .
.Pp
(This sort of entity-encoding trick will indeed fool many, if not
most, address-harvesting bots, but it definitely won't fool all of
them. It's better than nothing, but an address published in this way
will probably eventually start receiving spam.)
.Ss Backslash Escapes
.Nm
allows you to use backslash escapes to generate literal
characters which would otherwise have special meaning in Markdown's
formatting syntax. For example, if you wanted to surround a word with
literal asterisks (instead of an HTML `<em>` tag), you add backslashes
before the asterisks, like this:
.Bd -literal -offset indent
    \\*literal asterisks\\*
.Ed
.Pp
.Nm
provides backslash escapes for the following characters:
.Bl -tag -compact
.It \&\
backslash
.It \`
backtick
.It *
asterisk
.It _
underscore
.It \{\}
curly braces
.It []
square brackets
.It ()
parentheses
.It #
hash mark
.It +
plus sign
.It \-
minus sign (hyphen)
.It \.
dot
.It \!
exclamation mark
.El
.Sh BUGS
.Nm
assumes that tabs are set to 4 spaces.
.Sh AUTHOR
John Gruber
.%T http://daringfireball.net/
.Sh SEE ALSO
.Xr markdown 1 ,
.Xr markdown 3 ,
.Xr mkd-callbacks 3 ,
.Xr mkd-functions 3 ,
.Xr mkd-extensions 7 .
.Pp
.%T http://daringfireball.net/projects/markdown
.br
.%T http://docutils.sourceforge.net/mirror/setext.html
.br
.%T http://www.aaronsw.com/2002/atx/
.br
.%T http://textism.com/tools/textile/
.br
.%T http://docutils.sourceforge.net/rst.html
.br
.%T http://www.triptico.com/software/grutatxt.html
.br
.%T http://ettext.taint.org/doc/
